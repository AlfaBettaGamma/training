class Vertex:    def __init__(self, val):        self.Value = val        self.Hit = Falseclass SimpleGraph:    def __init__(self, size):        self.max_vertex = size        self.m_adjacency = [[0] * size for _ in range(size)]        self.vertex = [None] * size    def AddVertex(self, v):        # ваш код добавления новой вершины        # с значением value        # в свободное место массива vertex        for idx in range(self.vertex.__len__()):            if self.vertex[idx] is None:                self.vertex[idx] = Vertex(v)                break    # здесь и далее, параметры v -- индекс вершины    # в списке  vertex    def RemoveVertex(self, v):        # ваш код удаления вершины со всеми её рёбрами        assert v <= self.max_vertex - 1        self.vertex[v] = None        for i in range(self.max_vertex):            if i == v:                pass            else:                self.RemoveEdge(v, i)        self.m_adjacency[v] = [0] * self.max_vertex    def IsEdge(self, v1, v2):        # True если есть ребро между вершинами v1 и v2        if self.m_adjacency[v1][v2] == 1:            return True        return False    def AddEdge(self, v1, v2):        # добавление ребра между вершинами v1 и v2        if self.vertex[v1] is not None and self.vertex[v2] is not None:            self.m_adjacency[v1][v2] = 1            self.m_adjacency[v2][v1] = 1    def RemoveEdge(self, v1, v2):        # удаление ребра между вершинами v1 и v2        self.m_adjacency[v1][v2] = 0        self.m_adjacency[v2][v1] = 0    def WeakVertices(self):        # возвращает список узлов вне треугольников        isWeak = []        for i in range(self.max_vertex):            data = {}            for j in range(self.max_vertex):                if self.m_adjacency[i][j] != 0:                    d = {j:self.m_adjacency[i][j]}                    data.update(d)            k = list(data.keys())            if len(k) == 1 or len(k) == 0:                isWeak.append(self.vertex[i])            elif len(k) == 2:                if self.IsEdge(k[0], k[1]) is not True:                    isWeak.append(self.vertex[i])            elif len(k) > 2:                list_par = [(k[i], k[j]) for i in range(len(k)) for j in range(i + 1, len(k))]                list_bool = []                for item in list_par:                    if self.IsEdge(item[0], item[1]) is not True:                        list_bool.append(False)                    else:                        list_bool.append(True)                f = list_bool.count(True)                if f == 0:                    isWeak.append(self.vertex[i])        return isWeak